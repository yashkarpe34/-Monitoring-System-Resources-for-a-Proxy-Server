#!/bin/bash

# Refresh interval (in seconds)
REFRESH_INTERVAL=2

# Colors
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[1;33m"
NC="\033[0m" # No Color

draw_bar() {
    local percent=$1
    local size=20
    local filled=$((percent * size / 100))
    local empty=$((size - filled))
    local bar=$(printf "%0.s#" $(seq 1 $filled))
    bar+=$(printf "%0.s-" $(seq 1 $empty))
    echo -n "[$bar]"
}

get_cpu_info() {
    read cpu user nice system idle iowait irq softirq steal guest guest_nice < /proc/stat
    total=$((user + nice + system + idle + iowait + irq + softirq + steal))
    used=$((user + nice + system + irq + softirq + steal))
    echo "$((used * 100 / total))"
}

monitor_dashboard() {
    while true; do
        clear
        echo "+-------------------------------------------------------------+"
        echo "|                   SYSTEM MONITOR DASHBOARD                  |"
        echo "+-------------------------------------------------------------+"

        cpu_usage=$(get_cpu_info)
        load_avg=$(uptime | awk -F'load average:' '{print $2}' | xargs)
        mem_stats=$(free -m)
        total_mem=$(echo "$mem_stats" | awk '/Mem:/ {print $2}')
        used_mem=$(echo "$mem_stats" | awk '/Mem:/ {print $3}')
        mem_usage=$((used_mem * 100 / total_mem))
        swap_used=$(echo "$mem_stats" | awk '/Swap:/ {print $3}')
        swap_total=$(echo "$mem_stats" | awk '/Swap:/ {print $2}')
        disk_usage=$(df / | awk 'NR==2 {print $5}' | tr -d '%')

        echo -n "| CPU Usage: "
        draw_bar "$cpu_usage"
        echo " $cpu_usage%   Load Avg: $load_avg |"

        echo -n "| Memory:    "
        draw_bar "$mem_usage"
        echo " $mem_usage%   Swap: ${swap_used}MB / ${swap_total}MB |"

        echo -n "| Disk:      "
        draw_bar "$disk_usage"
        disk_warn=$(df / | awk 'NR==2 {print $5}' | tr -d '%')
        warning="OK"
        if [ "$disk_warn" -gt 80 ]; then warning="Warning: /var ${disk_warn}% used"; fi
        echo " $disk_usage%   $warning |"

        echo "+-------------------------------------------------------------+"
        echo "| Top Processes (${RED}CPU & Mem${NC})                                      |"
        echo "|-------------------------------------------------------------|"
        echo "| # | Process Name | CPU (%) | Memory (MB)                   |"
        echo "|-------------------------------------------------------------|"
        ps -eo pid,comm,%cpu,%mem --sort=-%cpu | head -n 6 | awk 'NR>1 {printf("| %-2s | %-12s | %-7s | %-10s |\n", NR-1, $2, $3, $4)}'
        echo "+-------------------------------------------------------------+"

        echo "+-------------------------------------------------------------+"
        echo "| Network Monitoring                                          |"
        echo "|-------------------------------------------------------------|"
        conn=$(ss -tunap | wc -l)
        pkts=$(netstat -s | grep 'segments received' | awk '{print $1}')
        drops=$(netstat -s | grep 'segments retransmited' | awk '{print $1}')
        rx=$(cat /proc/net/dev | awk '/eth0/ {print $2}')
        tx=$(cat /proc/net/dev | awk '/eth0/ {print $10}')
        echo "| Active Connections: $conn | Packet Drops: $drops              |"
        echo "| Data In: $(echo "$rx / 1024 / 1024" | bc)GB | Data Out: $(echo "$tx / 1024 / 1024" | bc)GB |"
        echo "+-------------------------------------------------------------+"

        echo "+-------------------------------------------------------------+"
        echo "| Services Status                                             |"
        echo "|-------------------------------------------------------------|"
        for service in ssh nginx iptables; do
            status=$(systemctl is-active $service 2>/dev/null)
            if [ "$status" == "active" ]; then
                echo -n "| $service: ${GREEN}[RUNNING]${NC}  "
            else
                echo -n "| $service: ${RED}[STOPPED]${NC}  "
            fi
        done
        echo
        echo "+-------------------------------------------------------------+"
        echo "| Press [Q] to exit | Refreshing every ${REFRESH_INTERVAL}s...        |"
        echo "+-------------------------------------------------------------+"

        read -t $REFRESH_INTERVAL -n 1 key
        [[ $key = "q" || $key = "Q" ]] && break
    done
}

monitor_dashboard
